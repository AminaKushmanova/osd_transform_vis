{"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"filter\":[]}"},"title":"sample_boostedOrangeSampleIframe","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"sample_boostedOrangeSampleIframe\",\"type\":\"transform\",\"aggs\":[],\"params\":{\"formula\":\"<div id=\\\"myDiv\\\" class=\\\"container\\\">\\n  <iframe style=\\\"position:absolute;top:0;left:0;width:100%;height:100%;border:none;\\\" id=\\\"myIframe\\\" >\\n  </iframe>\\n</div>\\n\",\"meta\":\"({\\ngetShadowDomLocation: function(selector) {\\n  let vizLocation;\\n  // output-viz being the top selector used by the Transform plugin\\n  // Get all the output-viz elements (can have mutliple selector if multiple transfrm vizs in a dashboard)\\n  // selector parameter value must be unque within the DOM\\n  const elements = $('.output-vis');\\n  let shadow;\\n  for (let elem of elements) {\\n      shadow = elem.shadowRoot;\\n      vizLocation = $(shadow).find(selector);\\n      if (vizLocation.length > 0) {\\n      // selector found, exiting\\n        break;\\n      } else {\\n        vizLocation = '.notFound';\\n      }\\n  } \\n  const obj = {\\n    vizLocation: vizLocation,\\n    shadowRoot: shadow\\n    }\\n// obj object contains the shadowRoot element and and the location of the selector within the shadowRoot\\n  return obj;\\n},\\nafter_render: function() {\\n  // Save this.meta Object for further use\\n  // Will be used to call the getShadowDomLocation function\\n  const meta = this.meta;\\n  \\n  let iframe = meta.getShadowDomLocation(\\\"#myIframe\\\").vizLocation; \\n  let theIframe = iframe[0];         \\n  theIframe.contentDocument.open();\\n  theIframe.contentDocument.write(`\\n  <hr>\\n  <h1>Boosted - accordion sample (with Iframe)</h1>\\n  <h2>Not working if not using iframe (boosted JS must be isolated)</h2>\\n  <h3>If not using JS elements, CSS can be used without Iframe</h3>\\n  <hr>\\n  <div class=\\\"accordion\\\" id=\\\"accordionExample\\\">\\n  <div class=\\\"accordion-item\\\">\\n    <h2 class=\\\"accordion-header\\\" id=\\\"headingOne\\\">\\n      <button class=\\\"accordion-button\\\" type=\\\"button\\\" data-bs-toggle=\\\"collapse\\\" data-bs-target=\\\"#collapseOne\\\" aria-expanded=\\\"true\\\" aria-controls=\\\"collapseOne\\\">\\n        Accordion Item #1\\n      </button>\\n    </h2>\\n    <div id=\\\"collapseOne\\\" class=\\\"accordion-collapse collapse show\\\" aria-labelledby=\\\"headingOne\\\" data-bs-parent=\\\"#accordionExample\\\">\\n      <div class=\\\"accordion-body\\\">\\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"accordion-item\\\">\\n    <h2 class=\\\"accordion-header\\\" id=\\\"headingTwo\\\">\\n      <button class=\\\"accordion-button collapsed\\\" type=\\\"button\\\" data-bs-toggle=\\\"collapse\\\" data-bs-target=\\\"#collapseTwo\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseTwo\\\">\\n        Accordion Item #2\\n      </button>\\n    </h2>\\n    <div id=\\\"collapseTwo\\\" class=\\\"accordion-collapse collapse\\\" aria-labelledby=\\\"headingTwo\\\" data-bs-parent=\\\"#accordionExample\\\">\\n      <div class=\\\"accordion-body\\\">\\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"accordion-item\\\">\\n    <h2 class=\\\"accordion-header\\\" id=\\\"headingThree\\\">\\n      <button class=\\\"accordion-button collapsed\\\" type=\\\"button\\\" data-bs-toggle=\\\"collapse\\\" data-bs-target=\\\"#collapseThree\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseThree\\\">\\n        Accordion Item #3\\n      </button>\\n    </h2>\\n    <div id=\\\"collapseThree\\\" class=\\\"accordion-collapse collapse\\\" aria-labelledby=\\\"headingThree\\\" data-bs-parent=\\\"#accordionExample\\\">\\n      <div class=\\\"accordion-body\\\">\\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\\n      </div>\\n    </div>\\n  </div>\\n</div>`);\\n\\n  let theIframeContentWindow = theIframe.contentWindow;\\n\\n  function loadScript(url) {\\n    return new Promise(function(resolve, reject) {\\n\\t    let script = document.createElement('script');\\n\\t    script.src = url;\\n\\t    script.async = false;\\n\\t    script.onload = function() {\\n\\t\\t    resolve(url);\\n\\t    };\\n\\t    script.onerror = function() {\\n\\t\\t    reject(url);\\n\\t    };\\n\\t    theIframeContentWindow.document.getElementsByTagName('head')[0].appendChild(script);\\n    });\\n  }\\n    \\n  let scripts = [\\n\\t\\t'https://cdn.jsdelivr.net/npm/boosted@5.1.3/dist/js/boosted.bundle.min.js'\\n\\t];\\n\\t\\t\\n  // Sample function\\n  let script1 = theIframeContentWindow.document.createElement('script');\\n  script1.type = 'text/javascript';\\n  script1.text = `function sample() {\\n  console.log('Sample custom JS loaded');\\n  }\\n  sample();\\n  `;\\n\\t\\t\\n\\n  // Save all Promises as array\\n  let promises = [];\\n  scripts.forEach(function(url) {\\n\\t  promises.push(loadScript(url));\\n  });\\n\\n  Promise.all(promises)\\n  .then(function() {\\n\\t  console.log('All scripts loaded');\\n\\t  // CSS\\n    let $head = iframe.contents().find(\\\"head\\\");  \\n    $head.append($(\\\"<link/>\\\", { rel: \\\"stylesheet\\\", href: \\\"https://cdn.jsdelivr.net/npm/boosted@5.1.3/dist/css/orange-helvetica.min.css\\\", type: \\\"text/css\\\" }));\\n    $head.append($(\\\"<link/>\\\", { rel: \\\"stylesheet\\\", href: \\\"https://cdn.jsdelivr.net/npm/boosted@5.1.3/dist/css/boosted.min.css\\\", type: \\\"text/css\\\" }));\\n    // JS \\n    theIframeContentWindow.document.getElementsByTagName('head')[0].appendChild(script1);\\n  }).catch(function(script) {\\n\\t   console.log(script + ' failed to load');\\n  });  \\n    \\n  theIframe.contentDocument.close();\\n}\\n});\",\"multiquerydsl\":\"\"}}"},"id":"30bc3a80-a533-11ec-ba4f-ab2c91a0dc88","migrationVersion":{"visualization":"7.10.0"},"references":[],"type":"visualization","updated_at":"2022-03-16T14:17:16.953Z","version":"WzIzNCwyOF0="}
{"exportedCount":1,"missingRefCount":0,"missingReferences":[]}