{"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"filter\":[]}"},"title":"sample_saveCSVToOpensearch","uiStateJSON":"{}","version":1,"visState":"{\"aggs\":[],\"params\":{\"dimensions\":{\"metric\":[]},\"formula\":\"<div class=\\\"container\\\">\\n  <div class=\\\"jumbotron\\\">\\n    <h1>Import CSV file</h1>\\n    <p>You can import any csv file (separator is ';'). Only the first 100 rows will be shown when using the view button.</p>\\n    <p>Opensearch auto-detection is enabled for numeric and date fields</p>\\n  </div>\\n\\n  <div class=\\\"alert alert-success d-none\\\" role=\\\"alert\\\" id=\\\"alert\\\">\\n    <h4 class=\\\"alert-heading\\\">Data saved to Opensearch</h4>\\n    <p>The data is being loaded into Opensearch. Depending on the size of the CSV file, it might take some time.</p>\\n  </div>\\n\\n  <div class=\\\"alert alert-danger d-none\\\" role=\\\"alert\\\" id=\\\"alertIndexExist\\\">\\n    <h4 class=\\\"alert-heading\\\">Index already exists in Opensearch</h4>\\n    <p>When given by the user, the index name should not exist. If you need to use an existing index, please select it from the dropdown list</p>\\n  </div>\\n\\n    <div id=\\\"selectFile\\\" class=\\\"form-group\\\">\\n      <input type=\\\"file\\\" class=\\\"form-control-file\\\" id=\\\"fileUpload\\\" />\\n    </div>\\n    \\n    <div class=\\\"form-group\\\">\\n      <button id=\\\"view\\\" class=\\\"btn btn-primary d-none\\\">View</button>\\n      <button id=\\\"upload\\\" class=\\\"btn btn-primary d-none\\\">Upload</button>\\n    </div>\\n\\n    <div id=\\\"selectIndex\\\" class=\\\"form-group d-none\\\">\\n      <label>Choose destination index</label>\\n    </div>\\n    \\n    <div id=\\\"createIndex\\\"  class=\\\"form-group d-none\\\">\\n      <label for=\\\"index\\\">Opensearch index</label>\\n      <input id=\\\"createIndexValue\\\" value=\\\"myindex\\\" class=\\\"form-control\\\" />\\n    </div>\\n    \\n    <div class=\\\"form-group\\\">\\n      <button id=\\\"save2es\\\" class=\\\"btn btn-success d-none\\\">Save to Opensearch</button>\\n    </div>\\n  <hr />\\n  <div id=\\\"displayCSV\\\"></div>\\n\\n  \\n</div>\\n\\n<!-- CSS only -->\\n<link rel=\\\"stylesheet\\\" href=\\\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\\\" integrity=\\\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\\\" crossorigin=\\\"anonymous\\\">\\n<link rel=\\\"stylesheet\\\" href=\\\"https://cdn.datatables.net/1.10.21/css/jquery.dataTables.min.css\\\">\\n\",\"meta\":\"({\\n\\t/*\\n\\tPrerequisites\\n\\t  kibana advanced settings\\n  \\t\\tStore URLs in session storage set to true (URL is too big)\\n  \\topensearch_dashboards.yml\\n\\t\\t  server.cors: true\\n\\t  opensearch.yml\\n  \\t\\thttp.cors.enabled : true\\n\\t\\t  // To be changed if used in prod env\\n\\t\\t  http.cors.allow-origin: \\\"*\\\"\\n\\t\\t  http.cors.allow-methods : OPTIONS, HEAD, GET, POST, PUT, DELETE\\n\\t\\t  http.cors.allow-headers: \\\"kbn-version, Origin, X-Requested-With, Content-Type, Accept, Engaged-Auth-Token\\\"\\n\\t\\t  // If basic auth is usedhttp.cors.allow-headers: \\\"kbn-version, Origin, X-Requested-With, Content-Type, Accept, Engaged-Auth-Token Authorization\\\"\\n  Configuration\\n    Change os variables values (host, user and password) if not using Opensearch in a localhost env\\n\\t */\\n\\t\\n\\timport: function() {\\n\\t\\t$.getScript(\\\"https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js\\\")\\n\\t\\t\\t.done(function (script, textStatus) {\\n\\n\\t\\t\\t\\t\\t// os variables\\n\\t\\t\\t\\t\\t// Do not forget trailing /\\n\\t\\t\\t\\t\\t//---------------------------------------------------------------------\\n\\t\\t\\t\\t\\tconst os_host = \\\"https://localhost:9200/\\\";\\n\\t\\t\\t\\t\\t// If basic auth, please change both variables below\\n\\t\\t\\t\\t\\tconst os_user = \\\"admin\\\";\\n\\t\\t\\t\\t\\tconst os_password = \\\"admin\\\";\\n\\t\\t\\t\\t\\t//---------------------------------------------------------------------\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// Function used to normalize column names\\n\\t\\t\\t\\t\\t// Input:\\n\\t\\t\\t\\t\\t//\\tcolumn_name: name of the column to normalize\\n\\t\\t\\t\\t\\t// Return:\\n\\t\\t\\t\\t\\t//\\tThe new normalized column name\\n\\t\\t\\t\\t\\tfunction normalize(column_name) {\\n\\t\\t\\t\\t\\t\\tconst to_remove = '!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^`{|}~ ';\\n\\t\\t\\t\\t\\t\\tconst regex = new RegExp('[' + to_remove + ']', 'g');\\n\\t\\t\\t\\t\\t\\tlet removed =  column_name.replace(regex, '_');\\n\\t\\t\\t\\t\\t\\tconst map = {\\n\\t\\t\\t\\t\\t\\t\\t\\t'a' : 'á|à|ã|â|À|Á|Ã|Â',\\n\\t\\t\\t\\t\\t\\t\\t\\t'e' : 'é|è|ê|É|È|Ê',\\n\\t\\t\\t\\t\\t\\t\\t\\t'i' : 'í|ì|î|Í|Ì|Î',\\n\\t\\t\\t\\t\\t\\t\\t\\t'o' : 'ó|ò|ô|õ|Ó|Ò|Ô|Õ',\\n\\t\\t\\t\\t\\t\\t\\t\\t'u' : 'ú|ù|û|ü|Ú|Ù|Û|Ü',\\n\\t\\t\\t\\t\\t\\t\\t\\t'c' : 'ç|Ç',\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\tlet str = removed.toLowerCase();\\n    \\n\\t\\t\\t\\t\\t\\tfor (let pattern in map) {\\n\\t\\t\\t\\t\\t\\t\\tstr = str.replace(new RegExp(map[pattern], 'g'), pattern);\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\treturn str;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// Function to read indices from Opensearch\\n\\t\\t\\t\\t\\t// Return: \\n\\t\\t\\t\\t\\t//\\tresponse form query\\n\\t\\t\\t\\t\\tfunction getIndicesListFromOpensearch() {\\n\\t\\t\\t\\t\\t\\t// Get indices from es\\n\\t\\t\\t\\t\\t\\tlet indices = $.ajax({\\n\\t\\t\\t\\t\\t\\t\\ttype: \\\"GET\\\",\\n\\t\\t\\t\\t\\t\\t\\tbeforeSend: function (request) {\\n\\t\\t\\t\\t\\t\\t\\t\\trequest.setRequestHeader(\\\"Authorization\\\", \\\"Basic \\\" + btoa(os_user + \\\":\\\" + os_password));\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\turl: os_host + \\\"_cat/indices?format=json&s=index\\\",\\n\\t\\t\\t\\t\\t\\t\\tcontentType: 'application/json',\\n\\t\\t\\t\\t\\t\\t\\tcrossDomain: true,\\n\\t\\t\\t\\t\\t\\t\\tasync: false,\\n\\t\\t\\t\\t\\t\\t\\tdataType: 'json'\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\treturn indices;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Function to load data into Opensearch\\n\\t\\t\\t\\t\\t// Input: \\n\\t\\t\\t\\t\\t//\\tos_index: index name to load data into\\n\\t\\t\\t\\t\\t//\\tpayload: data to be saved\\n\\t\\t\\t\\t\\tfunction loadBulkData(os_index, payload) {\\n\\t\\t\\t\\t\\t\\t$.ajax({\\n\\t\\t\\t\\t\\t\\t\\ttype: \\\"POST\\\",\\n\\t\\t\\t\\t\\t\\t\\tdata: payload + \\\"\\\\n\\\",\\n\\t\\t\\t\\t\\t\\t\\tbeforeSend: function (request) {\\n\\t\\t\\t\\t\\t\\t\\t\\trequest.setRequestHeader(\\\"Authorization\\\", \\\"Basic \\\" + btoa(os_user + \\\":\\\" + os_password));\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\turl: os_host + os_index + \\\"/_bulk?refresh\\\",\\n\\t\\t\\t\\t\\t\\t\\tcontentType: 'application/json',\\n\\t\\t\\t\\t\\t\\t\\tcrossDomain: true,\\n\\t\\t\\t\\t\\t\\t\\tsuccess: function (data, textStatus, jqXHR) {\\n\\t\\t\\t\\t\\t\\t\\t\\tconsole.log(textStatus + \\\": \\\" + jqXHR.status);\\n\\t\\t\\t\\t\\t\\t\\t\\t$(alert_display).removeClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t\\t$(alertIndexExist).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t\\t// do something with data\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\terror: function (jqXHR, textStatus, errorThrown) {\\n\\t\\t\\t\\t\\t\\t\\t\\tconsole.log(textStatus + \\\": \\\" + jqXHR.status + \\\" \\\" + errorThrown);\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\tdataType: 'json'\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Function to put default mapping into Opensearch\\n\\t\\t\\t\\t\\t// Date and numeric detection\\n\\t\\t\\t\\t\\tfunction putEsDefaultMapping(os_index) {\\n\\t\\t\\t\\t\\t\\tconst mapping = `{\\n\\t\\t\\t\\t\\t            \\\"mappings\\\": {\\n\\t\\t\\t\\t\\t              \\\"date_detection\\\": true,\\n\\t\\t\\t\\t\\t              \\\"numeric_detection\\\": true\\n\\t\\t\\t\\t\\t            }\\n\\t\\t\\t\\t\\t          }`\\n\\t\\t\\t\\t\\t\\t$.ajax({\\n\\t\\t\\t\\t\\t\\t\\ttype: \\\"PUT\\\",\\n\\t\\t\\t\\t\\t\\t\\tdata: mapping,\\n\\t\\t\\t\\t\\t\\t\\tbeforeSend: function (request) {\\n\\t\\t\\t\\t\\t\\t\\t\\trequest.setRequestHeader(\\\"Authorization\\\", \\\"Basic \\\" + btoa(os_user + \\\":\\\" + os_password));\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\turl: os_host + os_index,\\n\\t\\t\\t\\t\\t\\t\\tcontentType: 'application/json',\\n\\t\\t\\t\\t\\t\\t\\tcrossDomain: true,\\n\\t\\t\\t\\t\\t\\t\\tasync: false,\\n\\t\\t\\t\\t\\t\\t\\tdataType: 'json'\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Function to check if an index already exists in Opensearch\\n\\t\\t\\t\\t\\t// Input: \\n\\t\\t\\t\\t\\t//\\tos_index: index name to load data into\\n\\t\\t\\t\\t\\t// Return:\\n\\t\\t\\t\\t\\t//\\thttps tatus code (200 if index is found, 404 otherwise)\\n\\t\\t\\t\\t\\tfunction checkIndexExists(os_index) {\\n\\t\\t\\t\\t\\t\\tlet http_status;\\n\\t\\t\\t\\t\\t\\t$.ajax({\\n\\t\\t\\t\\t\\t\\t\\ttype: \\\"HEAD\\\",\\n\\t\\t\\t\\t\\t\\t\\turl: os_host + os_index,\\n\\t\\t\\t\\t\\t\\t\\tcrossDomain: true,\\n\\t\\t\\t\\t\\t\\t\\tbeforeSend: function (request) {\\n\\t\\t\\t\\t\\t\\t\\t\\trequest.setRequestHeader(\\\"Authorization\\\", \\\"Basic \\\" + btoa(os_user + \\\":\\\" + os_password));\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\tasync: false,\\n\\t\\t\\t\\t\\t\\t\\tsuccess: function (data, textStatus, jqXHR) {\\n\\t\\t\\t\\t\\t\\t\\t\\tconsole.log(textStatus + \\\": \\\" + jqXHR.status);\\n\\t\\t\\t\\t\\t\\t\\t\\thttp_status = jqXHR.status;\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\terror: function (jqXHR, textStatus, errorThrown) {\\n\\t\\t\\t\\t\\t\\t\\t\\tconsole.log(textStatus + \\\": \\\" + jqXHR.status + \\\" \\\" + errorThrown);\\n\\t\\t\\t\\t\\t\\t\\t\\thttp_status = jqXHR.status;\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\treturn http_status;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Function to read the csv file and depending on the procss to perform\\n\\t\\t\\t\\t\\t// either display csv content as a table or load data into ES\\n\\t\\t\\t\\t\\tfunction readCsvFile(display_or_save, csv_file, os_index) {\\n\\t\\t\\t\\t\\t\\t// Input: \\n\\t\\t\\t\\t\\t\\t//\\tdisplay_or_save: values can be \\\"display\\\" or \\\"save\\\", display to display csv content as a an html table or \\\"save\\\" to load data into ES\\n\\t\\t\\t\\t\\t\\t//\\tcsv_file: csv file read from disk\\n\\t\\t\\t\\t\\t\\t//\\tos_index: index name to load data into\\n\\t\\t\\t\\t\\t\\tlet nb_fields;\\n\\t\\t\\t\\t\\t\\tlet final_result = '';\\n\\t\\t\\t\\t\\t\\tlet os_index_json = \\\"{ \\\\\\\"index\\\\\\\":{ } }\\\\n\\\";\\n\\t\\t\\t\\t\\t\\t// Regex for input filename\\n\\t\\t\\t\\t\\t\\tconst regex_filename = /^([a-zA-Z0-9\\\\s_\\\\\\\\.\\\\-:])+(.csv|.txt)$/;\\n\\t\\t\\t\\t\\t\\t// csv separator\\n\\t\\t\\t\\t\\t\\tconst csv_separator = ';';\\n\\n\\t\\t\\t\\t\\t\\tif (regex_filename.test(csv_file.name.toLowerCase())) {\\n\\t\\t\\t\\t\\t\\t\\tif (typeof (FileReader) != \\\"undefined\\\") {\\n\\t\\t\\t\\t\\t\\t\\t\\tlet reader = new FileReader();\\n\\t\\t\\t\\t\\t\\t\\t\\tlet headers;\\n\\t\\t\\t\\t\\t\\t\\t\\tlet nb_fields;\\n\\t\\t\\t\\t\\t            let table = document.createElement(\\\"table\\\"); \\n\\t\\t\\t\\t\\t            reader.onload = function (e) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tlet rows = e.target.result.split(\\\"\\\\n\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Display the first 10 lines\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tlet rows2display = rows.length;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (rows.length > 100 && display_or_save == \\\"display\\\") {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\trows2display = 100;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tlet header_html;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let i = 0; i < rows2display; i++) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (typeof rows[i] != 'undefined') {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet cells = rows[i].split(csv_separator);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (i == 0) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\theaders = cells;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnb_fields = headers.length;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Build html table and table header\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t            $(table).addClass(\\\"display\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t            $(table).prop('id', 'viewTableId');\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t            header_html = '<thead><tr>';\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let header of headers) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\theader_html += '<td>' + normalize(header) + '</td>';\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\theader_html += '</tr></thead>'\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (cells.length == nb_fields) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (display_or_save == \\\"display\\\") {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Build table content\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tvar row = table.insertRow(-1);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let j = 0; j < cells.length; j++) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet cell = row.insertCell(-1);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet number = parseFloat(cells[j].replace(',','.')).toFixed(2);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet final_value;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (!isNaN(number) && cells[j].includes(\\\",\\\")) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  final_value = number;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  final_value = cells[j];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcell.innerHTML = final_value.replace(/\\\"/g, '');\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Build payload for bulk API\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet obj = {};\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let j = 0; j < nb_fields; j++) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  let number = parseFloat(cells[j].replace(',','.')).toFixed(2);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  let final_value;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (!isNaN(number) && cells[j].includes(\\\",\\\")) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  final_value = number;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  final_value = cells[j];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tobj[headers[j].replace(/\\\"/g, '').toLowerCase()] = final_value.replace(/\\\"/g, '');\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfinal_result = final_result.concat(os_index_json);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfinal_result = final_result.concat(JSON.stringify(obj) + \\\"\\\\n\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (display_or_save == \\\"display\\\") {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Display table\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$(display).html('');\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$(display).append(table);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$(table).append(header_html);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$(table).DataTable();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Load to os_index\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tloadBulkData(os_index, final_result);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\treader.readAsText(csv_file);\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\talert(\\\"This browser does not support HTML5.\\\");\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\talert(\\\"Please upload a valid CSV file.\\\");\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// Get shadow DOM elements\\n\\t\\t\\t\\t\\tlet fileUpload;\\n\\t\\t\\t\\t\\tlet upload;\\n\\t\\t\\t\\t\\tlet display;\\n\\t\\t\\t\\t\\tlet selectIndex;\\n\\t\\t\\t\\t\\tlet view;\\n\\t\\t\\t\\t\\tlet createIndex;\\n\\t\\t\\t\\t\\tlet createIndexValue;\\n\\t\\t\\t\\t\\tlet save2es;\\n\\t\\t\\t\\t\\tlet alert_display;\\n\\t\\t\\t\\t\\tlet alertIndexExist;\\n\\t\\t\\t\\t\\tlet shadow;\\n\\t\\t\\t\\t\\tconst elements = $('.output-vis');\\n\\t\\t\\t\\t\\tfor (let elem of elements) {\\n\\t\\t\\t\\t\\t\\tshadow = elem.shadowRoot;\\n\\t\\t\\t\\t\\t\\tfileUpload = $(shadow).find(\\\"#fileUpload\\\");\\n\\t\\t\\t\\t\\t\\tupload = $(shadow).find(\\\"#upload\\\");\\n\\t\\t\\t\\t\\t\\tdisplay = $(shadow).find(\\\"#displayCSV\\\");\\n\\t\\t\\t\\t\\t\\tselectIndex = $(shadow).find(\\\"#selectIndex\\\");\\n\\t\\t\\t\\t\\t\\tview = $(shadow).find(\\\"#view\\\");\\n\\t\\t\\t\\t\\t\\tcreateIndex = $(shadow).find(\\\"#createIndex\\\");\\n\\t\\t\\t\\t\\t\\tsave2es = $(shadow).find(\\\"#save2es\\\");\\n\\t\\t\\t\\t\\t\\tcreateIndexValue = $(shadow).find(\\\"#createIndexValue\\\");\\n\\t\\t\\t\\t\\t\\talert_display = $(shadow).find(\\\"#alert\\\");\\n\\t\\t\\t\\t\\t\\talertIndexExist = $(shadow).find(\\\"#alertIndexExist\\\");\\n\\t\\t\\t\\t\\t\\tif ($(fileUpload).length > 0) {\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Change event to manage file change made by user\\n\\t\\t\\t\\t\\t$(fileUpload).change(function () {\\n\\t\\t\\t\\t\\t\\t$(display).html('');\\n\\t\\t\\t\\t\\t\\tlet file2Upload = $(fileUpload).prop('files')[0];\\n\\t\\t\\t\\t\\t\\tif (typeof file2Upload == 'undefined') {\\n\\t\\t\\t\\t\\t\\t\\t$(view).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t$(upload).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t$(selectIndex).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t$(createIndex).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t$(alert_display).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t$(alertIndexExist).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t$(save2es).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t$(selectIndex).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t$(createIndex).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t$(alert_display).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t$(save2es).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t(alertIndexExist).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t$(view).removeClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t$(upload).removeClass('d-none');\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t})\\n\\n\\t\\t\\t\\t\\t// Click event to view CSV content within a datatable\\n\\t\\t\\t\\t\\t$(view).click(function () {\\n\\t\\t\\t\\t\\t\\tlet file2Upload = $(fileUpload).prop('files')[0];\\n\\t\\t\\t\\t\\t\\treadCsvFile(\\\"display\\\", file2Upload);\\n\\t\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t\\t// Click event to display candidate ES indices\\n\\t\\t\\t\\t\\t$(upload).click(function () {\\n\\t\\t\\t\\t\\t\\t// Get indices\\n\\t\\t\\t\\t\\t\\tconst indices = getIndicesListFromOpensearch();\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t// Add select index\\n\\t\\t\\t\\t\\t\\tlet indices_arr = JSON.parse(indices.responseText);\\n\\t\\t\\t\\t\\t\\tlet indices_choice = [ 'Select index', '-- Create new index --' ];\\n\\t\\t\\t\\t\\t\\tfor (let os_index of indices_arr) {\\n\\t\\t\\t\\t\\t\\t\\tif (os_index.index.charAt(0) != '.') {\\n\\t\\t\\t\\t\\t\\t\\t\\tindices_choice.push(os_index.index);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t//Create and append select list\\n\\t\\t\\t\\t\\t\\tlet selectList = document.createElement(\\\"select\\\");\\n\\t\\t\\t\\t\\t\\tselectList.id = \\\"selectListId\\\";\\n\\t\\t\\t\\t\\t\\tlet select_exist = $(shadow).find('#selectListId');\\n\\t\\t\\t\\t\\t\\tif (!$(select_exist).length > 0) {\\n\\t\\t\\t\\t\\t\\t\\t$(selectIndex).append(selectList);\\n\\t\\t\\t\\t\\t\\t\\tselect_exist = $(shadow).find('#selectListId');\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t// Create and append the options\\n\\t\\t\\t\\t\\t\\t$(select_exist).empty();\\n\\t\\t\\t\\t\\t\\tfor (let i = 0; i < indices_choice.length; i++) {\\n\\t\\t\\t\\t\\t\\t\\tlet option = document.createElement(\\\"option\\\");\\n\\t\\t\\t\\t\\t\\t\\toption.value = indices_choice[i];\\n\\t\\t\\t\\t\\t\\t\\toption.text = indices_choice[i];\\n\\t\\t\\t\\t\\t\\t\\t$(select_exist).append(option);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t        let default_option = $(shadow).find('#selectListId option[value=\\\"Select index\\\"]');\\n\\t\\t\\t\\t        $(createIndex).addClass('d-none');\\n\\t\\t\\t\\t        $(save2es).addClass('d-none');\\n\\t\\t\\t\\t        $(selectIndex).val(\\\"Select index\\\").change();\\n\\t\\t\\t\\t        $(default_option).prop('selected', true);\\n\\t\\t\\t\\t        $(selectIndex).removeClass('d-none');\\n\\t\\t\\t\\t        \\n\\t\\t\\t\\t        $(select_exist).unbind();\\n\\t\\t\\t\\t        $(select_exist).change(function() {\\n\\t\\t\\t\\t          if (this.value == 'Select index') {\\n\\t\\t\\t\\t            $(save2es).addClass('d-none');\\n\\t\\t\\t\\t          } else {\\n\\t\\t\\t\\t            $(save2es).removeClass('d-none');\\n\\t\\t\\t\\t          }\\n\\t\\t\\t\\t          if (this.value == '-- Create new index --') {\\n\\t\\t\\t\\t            $(createIndex).removeClass('d-none');\\n\\t\\t\\t\\t          } else {\\n\\t\\t\\t\\t            $(createIndex).addClass('d-none');\\n\\t\\t\\t\\t          }\\n\\t\\t\\t\\t        });\\n\\t\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t\\t// Click event to save data into ES\\n\\t\\t\\t\\t\\t$(save2es).click(function () {\\n\\n\\t\\t\\t\\t\\t\\tconst selected_option = $(shadow).find('#selectListId :selected');\\n\\t\\t\\t\\t\\t\\tlet index_name;\\n\\n\\t\\t\\t\\t\\t\\tif ($(selected_option).text() == '-- Create new index --') {\\n\\t\\t\\t\\t\\t\\t\\t// New index\\n\\t\\t\\t\\t\\t\\t\\tindex_name = $(shadow).find('#createIndexValue').val().toLowerCase();\\n\\n\\t\\t\\t\\t\\t\\t\\t// Check first if index already exists\\n\\t\\t\\t\\t\\t\\t\\tconst return_code = checkIndexExists(index_name);\\n\\n\\t\\t\\t\\t\\t\\t\\t// If index already exist, dipslay error message and get out\\n\\t\\t\\t\\t\\t\\t\\tif (return_code == 200) {\\n\\t\\t\\t\\t\\t\\t\\t\\t$(alertIndexExist).removeClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t\\t$(alert_display).addClass('d-none');\\n\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t// Else, index exists, then put default mapping\\n\\t\\t\\t\\t\\t\\t\\tputEsDefaultMapping(index_name);\\n\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tindex_name = $(shadow).find('#selectListId :selected').val();\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Prepare payload for BULK request\\n\\t\\t\\t\\t\\t\\tconst file2Upload = $(fileUpload).prop('files')[0];\\n\\t\\t\\t\\t\\t\\treadCsvFile(\\\"save\\\", file2Upload, index_name);\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t        $(createIndex).addClass('d-none');\\n\\t\\t\\t\\t        $(save2es).addClass('d-none');\\n\\t\\t\\t\\t        $(selectIndex).addClass('d-none');\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t}\\n});\",\"multiquerydsl\":\"{\\n\\n}\"},\"title\":\"sample_saveCSVToOpensearch\",\"type\":\"transform\"}"},"id":"0a9431e0-c6a1-11ea-a9e6-4d54a41e5ec8","migrationVersion":{"visualization":"7.10.0"},"references":[],"type":"visualization","updated_at":"2021-10-29T15:21:55.459Z","version":"WzE4LDJd"}
{"exportedCount":1,"missingRefCount":0,"missingReferences":[]}