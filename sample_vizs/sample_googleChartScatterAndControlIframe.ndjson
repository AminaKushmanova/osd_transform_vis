{"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"},"title":"sample_googleChartScatterAndControlIframe","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"sample_googleChartScatterAndControlIframe\",\"type\":\"transform\",\"aggs\":[],\"params\":{\"dimensions\":{\"metric\":[]},\"formula\":\"<div id=\\\"myDiv\\\" class=\\\"container\\\">\\n</div>\\n\",\"meta\":\"({\\nbefore_render: function() {\\n\\n  // Prepare the data\\n  var data = [\\n    [ 8, 12, \\\"data1\\\"],\\n    [ 4, 15.5, \\\"data2\\\"],\\n    [ 11, 14, \\\"data3\\\"],\\n    [ 4, 22, \\\"data4\\\"],\\n    [ 3, 3.5, \\\"data5\\\"],\\n    [ 6.5, 7, \\\"data6\\\"]\\n  ];\\n  \\n  // Store data into browser to make it available for iframe\\n  localStorage.setItem('scatterValues', JSON.stringify(data))\\n},\\n\\nafter_render: function() {\\n      //-------------------------------------------------------------------------\\n      // Dive: function to get the location of a CSS selector within a shadow DOM \\n      //-------------------------------------------------------------------------\\n      function getShadowDomLocation(selector) {\\n        let vizLocation;\\n        // output-viz being the top selector used by the Transform plugin\\n        // Get all the output-viz elements (can have mutliple selector if multiple transfrm vizs in a dashboard)\\n        // selector parameter value must be unque within the DOM\\n        const elements = $('.output-vis');\\n        let shadow;\\n        for (let elem of elements) {\\n          shadow = elem.shadowRoot;\\n          vizLocation = $(shadow).find(selector);\\n          if (vizLocation.length > 0) {\\n            // selector found, exiting\\n            break;\\n          } else {\\n            vizLocation = '.notFound';\\n          }\\n        } \\n        const obj = {\\n        vizLocation: vizLocation,\\n        shadowRoot: shadow\\n        }\\n        // obj object contains the shadowRoot element and and the location of the selector within the shadowRoot\\n        return obj; \\n      }\\n\\n      let myDiv = getShadowDomLocation(\\\"#myDiv\\\").vizLocation; \\n      $(myDiv).empty();\\n      $(myDiv).append('<iframe style=\\\"position:absolute;top:0;left:0;width:100%;height:100%;border:none;\\\" id=\\\"myIframe\\\" ></iframe>')\\n      let iframe = getShadowDomLocation(\\\"#myIframe\\\").vizLocation; \\n      let theIframe = iframe[0];         \\n      theIframe.contentDocument.open();\\n      theIframe.contentDocument.write(\\\"scatter \\\");\\n      let theIframeContentWindow = theIframe.contentWindow;\\n\\n      // DrawChart function  \\n      let script1 = theIframeContentWindow.document.createElement('script');\\n      script1.type = 'text/javascript';\\n      script1.text = `function drawChart() {\\n        let myData =JSON.parse(localStorage.getItem('scatterValues'));\\n\\n        let divLocation = document.body.appendChild(document.createElement('div') );\\n        divLocation.id = 'bigDiv';\\n        let chartLocation = divLocation.appendChild(document.createElement('div') );\\n        chartLocation.id = 'chartDiv';\\n        let controlLocation = divLocation.appendChild(document.createElement('div') );\\n        controlLocation.id = 'controlDiv';\\n\\n        var dashboard = new google.visualization.Dashboard(\\n          divLocation);\\n\\n        // We omit \\\"var\\\" so that programmaticSlider is visible to changeRange.\\n        var programmaticSlider = new google.visualization.ControlWrapper({\\n          'controlType': 'NumberRangeFilter',\\n          'containerId': controlLocation,\\n          'options': {\\n            'filterColumnLabel': 'Age',\\n            'ui': {'labelStacking': 'vertical'}\\n          }\\n        });\\n\\n        var programmaticChart  = new google.visualization.ChartWrapper({\\n          'chartType': 'ScatterChart',\\n          'containerId': chartLocation,\\n          'options': {\\n            width: 1000,\\n            height: 350,\\n            title: 'Age vs. Weight',\\n            titleTextStyle: {color: 'black', bold: true},\\n            hAxis: {\\n              title: 'Age', \\n              minValue: 0, \\n              maxValue: 15,\\n              titleTextStyle: {\\n                color: 'black', \\n                bold: false,\\n                italic: false\\n              },\\n            },\\n            vAxis: {\\n              title: 'Weight', \\n              minValue: 0, \\n              maxValue: 15,\\n              titleTextStyle: {\\n                color: 'black', \\n                bold: false,\\n                italic: false\\n              },\\n            },\\n            legend: 'none',\\n            colors: ['#4BB4E6'],\\n            pointSize: 12,\\n            annotations: {\\n              textStyle: {\\n                fontName: 'Arial',\\n                fontSize: 12,\\n                bold: true,\\n                italic: false,\\n                color: 'black'\\n              }\\n            }\\n          }\\n        });\\n\\n        // Preparing the table for the chart  \\n        var data = new google.visualization.DataTable();\\n        data.addColumn('number', 'Age');\\n        data.addColumn('number', 'Weight');\\n        data.addColumn({type:'string', role:'annotation'});\\n        data.addColumn({type:'string', role:'tooltip', p: {html: true}})\\n \\n        let dataRows = [];\\n        for (let z = 0; z < myData.length;  z++) {\\n          dataRows.push([\\n            parseFloat(myData[z][0]), \\n            parseFloat(myData[z][1]),\\n            myData[z][2],\\n            myData[z][2]+'\\\\\\\\n'+'\\\\\\\\n'+'Age: '+myData[z][1]+'\\\\\\\\n'+'Poids: '+myData[z][0]\\n          ]);\\n         }\\n         data.addRows(dataRows);\\n         \\n        dashboard.bind(programmaticSlider, programmaticChart);\\n        dashboard.draw(data);\\n\\n      }`;\\n\\n    let script2 = theIframeContentWindow.document.createElement('script');\\n    script2.type = 'text/javascript';\\n    script2.text = 'google.charts.load(\\\\'current\\\\', {packages: [\\\\'corechart\\\\', \\\\'controls\\\\']}).then(drawChart);';\\n\\n    function loadScript(url) {\\n\\t    return new Promise(function(resolve, reject) {\\n\\t\\t    let script = document.createElement('script');\\n\\t\\t    script.src = url;\\n\\t\\t    script.async = false;\\n\\t\\t    script.onload = function() {\\n\\t\\t\\t    resolve(url);\\n\\t\\t    };\\n\\t\\t    script.onerror = function() {\\n\\t\\t\\t    reject(url);\\n\\t\\t    };\\n\\t\\t    theIframeContentWindow.document.getElementsByTagName('head')[0].appendChild(script);\\n\\t    });\\n    }\\n    \\n    let scripts = [\\n\\t\\t\\t'https://www.gstatic.com/charts/loader.js'\\n\\t\\t];\\n\\n    // Save all Promises as array\\n    let promises = [];\\n    scripts.forEach(function(url) {\\n\\t    promises.push(loadScript(url));\\n    });\\n\\n    Promise.all(promises)\\n    .then(function() {\\n\\t    console.log('All scripts loaded');\\n\\t    // CSS\\n      let $head = $(\\\"myIframe\\\").contents().find(\\\"head\\\");  \\n      $head.append($(\\\"<link/>\\\", { rel: \\\"stylesheet\\\", href: \\\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\\\", type: \\\"text/css\\\" }));\\n\\n      // JS \\n      theIframeContentWindow.document.getElementsByTagName('head')[0].appendChild(script1);\\n      theIframeContentWindow.document.getElementsByTagName('head')[0].appendChild(script2);\\n    }).catch(function(script) {\\n\\t    console.log(script + ' failed to load');\\n    });  \\n    \\n    theIframe.contentDocument.close();\\n  }\\n});\",\"multiquerydsl\":\"{\\n\\n}\"}}"},"id":"2f3a74b0-6d30-11eb-a3a1-27afa2682979","migrationVersion":{"visualization":"7.10.0"},"references":[],"type":"visualization","updated_at":"2022-01-14T10:36:47.280Z","version":"WzIyNCwyMl0="}
{"exportedCount":1,"missingRefCount":0,"missingReferences":[]}